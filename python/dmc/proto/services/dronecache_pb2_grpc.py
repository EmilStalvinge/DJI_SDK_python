# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from proto import messages_pb2 as proto_dot_messages__pb2
from proto.services import dronecache_pb2 as proto_dot_services_dot_dronecache__pb2


class DroneCacheStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetID = channel.unary_unary(
        '/dronecache.DroneCache/GetID',
        request_serializer=proto_dot_services_dot_dronecache__pb2.GetIdRequest.SerializeToString,
        response_deserializer=proto_dot_services_dot_dronecache__pb2.GetIdResponse.FromString,
        )
    self.GetOrg = channel.unary_unary(
        '/dronecache.DroneCache/GetOrg',
        request_serializer=proto_dot_services_dot_dronecache__pb2.GetOrgRequest.SerializeToString,
        response_deserializer=proto_dot_services_dot_dronecache__pb2.GetOrgResponse.FromString,
        )
    self.Stream = channel.unary_stream(
        '/dronecache.DroneCache/Stream',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=proto_dot_messages__pb2.Message.FromString,
        )
    self.GetDistance = channel.unary_unary(
        '/dronecache.DroneCache/GetDistance',
        request_serializer=proto_dot_services_dot_dronecache__pb2.GetDistanceRequest.SerializeToString,
        response_deserializer=proto_dot_services_dot_dronecache__pb2.GetDistanceResponse.FromString,
        )


class DroneCacheServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetID(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetOrg(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Stream(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetDistance(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DroneCacheServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetID': grpc.unary_unary_rpc_method_handler(
          servicer.GetID,
          request_deserializer=proto_dot_services_dot_dronecache__pb2.GetIdRequest.FromString,
          response_serializer=proto_dot_services_dot_dronecache__pb2.GetIdResponse.SerializeToString,
      ),
      'GetOrg': grpc.unary_unary_rpc_method_handler(
          servicer.GetOrg,
          request_deserializer=proto_dot_services_dot_dronecache__pb2.GetOrgRequest.FromString,
          response_serializer=proto_dot_services_dot_dronecache__pb2.GetOrgResponse.SerializeToString,
      ),
      'Stream': grpc.unary_stream_rpc_method_handler(
          servicer.Stream,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=proto_dot_messages__pb2.Message.SerializeToString,
      ),
      'GetDistance': grpc.unary_unary_rpc_method_handler(
          servicer.GetDistance,
          request_deserializer=proto_dot_services_dot_dronecache__pb2.GetDistanceRequest.FromString,
          response_serializer=proto_dot_services_dot_dronecache__pb2.GetDistanceResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dronecache.DroneCache', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
